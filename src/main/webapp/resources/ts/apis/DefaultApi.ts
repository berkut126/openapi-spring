/* tslint:disable */
/* eslint-disable */
/**
 * BEST HACK 2020 (web)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineObject2,
    InlineObject2FromJSON,
    InlineObject2ToJSON,
    InlineObject3,
    InlineObject3FromJSON,
    InlineObject3ToJSON,
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    InlineResponse2001,
    InlineResponse2001FromJSON,
    InlineResponse2001ToJSON,
} from '../models';

export interface AlgoCodeLoginGetRequest {
    login: string;
}

export interface AlgoCodePostRequest {
    fileName?: Blob;
}

export interface AlgoCodeUUIDCodeGetRequest {
    UUID: string;
}

export interface AlgoCodeUUIDDeleteRequest {
    UUID: string;
}

export interface AlgoCodeUUIDStatusGetRequest {
    UUID: string;
}

export interface UserLoginDeleteRequest {
    login: string;
}

export interface UserLoginGetRequest {
    login: string;
}

export interface UserLoginPutRequest {
    login: string;
    inlineObject2: InlineObject2;
}

export interface UserLoginRolesGetRequest {
    login: string;
}

export interface UserLoginRolesPutRequest {
    login: string;
    inlineObject3: InlineObject3;
}

export interface UserLoginStatusGetRequest {
    login: string;
}

export interface UserPostRequest {
    login?: string;
    password?: string;
}

/**
 * no description
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * list of files
     */
    async algoCodeLoginGetRaw(requestParameters: AlgoCodeLoginGetRequest): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.login === null || requestParameters.login === undefined) {
            throw new runtime.RequiredError('login','Required parameter requestParameters.login was null or undefined when calling algoCodeLoginGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/algoCode/{login}`.replace(`{${"login"}}`, encodeURIComponent(String(requestParameters.login))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * list of files
     */
    async algoCodeLoginGet(requestParameters: AlgoCodeLoginGetRequest): Promise<Array<string>> {
        const response = await this.algoCodeLoginGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * upload file
     */
    async algoCodePostRaw(requestParameters: AlgoCodePostRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.fileName !== undefined) {
            formParams.append('fileName', requestParameters.fileName as any);
        }

        const response = await this.request({
            path: `/algoCode`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * upload file
     */
    async algoCodePost(requestParameters: AlgoCodePostRequest): Promise<string> {
        const response = await this.algoCodePostRaw(requestParameters);
        return await response.value();
    }

    /**
     * returns the code
     */
    async algoCodeUUIDCodeGetRaw(requestParameters: AlgoCodeUUIDCodeGetRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.UUID === null || requestParameters.UUID === undefined) {
            throw new runtime.RequiredError('UUID','Required parameter requestParameters.UUID was null or undefined when calling algoCodeUUIDCodeGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/algoCode/{UUID}/code`.replace(`{${"UUID"}}`, encodeURIComponent(String(requestParameters.UUID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * returns the code
     */
    async algoCodeUUIDCodeGet(requestParameters: AlgoCodeUUIDCodeGetRequest): Promise<string> {
        const response = await this.algoCodeUUIDCodeGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete code
     */
    async algoCodeUUIDDeleteRaw(requestParameters: AlgoCodeUUIDDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.UUID === null || requestParameters.UUID === undefined) {
            throw new runtime.RequiredError('UUID','Required parameter requestParameters.UUID was null or undefined when calling algoCodeUUIDDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/algoCode/{UUID}`.replace(`{${"UUID"}}`, encodeURIComponent(String(requestParameters.UUID))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * delete code
     */
    async algoCodeUUIDDelete(requestParameters: AlgoCodeUUIDDeleteRequest): Promise<void> {
        await this.algoCodeUUIDDeleteRaw(requestParameters);
    }

    /**
     * code status
     */
    async algoCodeUUIDStatusGetRaw(requestParameters: AlgoCodeUUIDStatusGetRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.UUID === null || requestParameters.UUID === undefined) {
            throw new runtime.RequiredError('UUID','Required parameter requestParameters.UUID was null or undefined when calling algoCodeUUIDStatusGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/algoCode/{UUID}/status`.replace(`{${"UUID"}}`, encodeURIComponent(String(requestParameters.UUID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * code status
     */
    async algoCodeUUIDStatusGet(requestParameters: AlgoCodeUUIDStatusGetRequest): Promise<object> {
        const response = await this.algoCodeUUIDStatusGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * list of all user logins
     */
    async userGetRaw(): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * list of all user logins
     */
    async userGet(): Promise<Array<string>> {
        const response = await this.userGetRaw();
        return await response.value();
    }

    /**
     * delete user
     */
    async userLoginDeleteRaw(requestParameters: UserLoginDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.login === null || requestParameters.login === undefined) {
            throw new runtime.RequiredError('login','Required parameter requestParameters.login was null or undefined when calling userLoginDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/{login}`.replace(`{${"login"}}`, encodeURIComponent(String(requestParameters.login))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * delete user
     */
    async userLoginDelete(requestParameters: UserLoginDeleteRequest): Promise<void> {
        await this.userLoginDeleteRaw(requestParameters);
    }

    /**
     * user object
     */
    async userLoginGetRaw(requestParameters: UserLoginGetRequest): Promise<runtime.ApiResponse<InlineResponse200>> {
        if (requestParameters.login === null || requestParameters.login === undefined) {
            throw new runtime.RequiredError('login','Required parameter requestParameters.login was null or undefined when calling userLoginGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/{login}`.replace(`{${"login"}}`, encodeURIComponent(String(requestParameters.login))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * user object
     */
    async userLoginGet(requestParameters: UserLoginGetRequest): Promise<InlineResponse200> {
        const response = await this.userLoginGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * update user
     */
    async userLoginPutRaw(requestParameters: UserLoginPutRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.login === null || requestParameters.login === undefined) {
            throw new runtime.RequiredError('login','Required parameter requestParameters.login was null or undefined when calling userLoginPut.');
        }

        if (requestParameters.inlineObject2 === null || requestParameters.inlineObject2 === undefined) {
            throw new runtime.RequiredError('inlineObject2','Required parameter requestParameters.inlineObject2 was null or undefined when calling userLoginPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/x-www-urlencoded';

        const response = await this.request({
            path: `/user/{login}`.replace(`{${"login"}}`, encodeURIComponent(String(requestParameters.login))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject2ToJSON(requestParameters.inlineObject2),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * update user
     */
    async userLoginPut(requestParameters: UserLoginPutRequest): Promise<void> {
        await this.userLoginPutRaw(requestParameters);
    }

    /**
     * get user roles
     */
    async userLoginRolesGetRaw(requestParameters: UserLoginRolesGetRequest): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.login === null || requestParameters.login === undefined) {
            throw new runtime.RequiredError('login','Required parameter requestParameters.login was null or undefined when calling userLoginRolesGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/{login}/roles`.replace(`{${"login"}}`, encodeURIComponent(String(requestParameters.login))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get user roles
     */
    async userLoginRolesGet(requestParameters: UserLoginRolesGetRequest): Promise<Array<string>> {
        const response = await this.userLoginRolesGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * update user roles
     */
    async userLoginRolesPutRaw(requestParameters: UserLoginRolesPutRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.login === null || requestParameters.login === undefined) {
            throw new runtime.RequiredError('login','Required parameter requestParameters.login was null or undefined when calling userLoginRolesPut.');
        }

        if (requestParameters.inlineObject3 === null || requestParameters.inlineObject3 === undefined) {
            throw new runtime.RequiredError('inlineObject3','Required parameter requestParameters.inlineObject3 was null or undefined when calling userLoginRolesPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/x-www-urlencoded';

        const response = await this.request({
            path: `/user/{login}/roles`.replace(`{${"login"}}`, encodeURIComponent(String(requestParameters.login))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject3ToJSON(requestParameters.inlineObject3),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * update user roles
     */
    async userLoginRolesPut(requestParameters: UserLoginRolesPutRequest): Promise<void> {
        await this.userLoginRolesPutRaw(requestParameters);
    }

    /**
     * user status
     */
    async userLoginStatusGetRaw(requestParameters: UserLoginStatusGetRequest): Promise<runtime.ApiResponse<InlineResponse2001>> {
        if (requestParameters.login === null || requestParameters.login === undefined) {
            throw new runtime.RequiredError('login','Required parameter requestParameters.login was null or undefined when calling userLoginStatusGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/{login}/status`.replace(`{${"login"}}`, encodeURIComponent(String(requestParameters.login))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * user status
     */
    async userLoginStatusGet(requestParameters: UserLoginStatusGetRequest): Promise<InlineResponse2001> {
        const response = await this.userLoginStatusGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * create new user
     */
    async userPostRaw(requestParameters: UserPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.login !== undefined) {
            formParams.append('login', requestParameters.login as any);
        }

        if (requestParameters.password !== undefined) {
            formParams.append('password', requestParameters.password as any);
        }

        const response = await this.request({
            path: `/user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * create new user
     */
    async userPost(requestParameters: UserPostRequest): Promise<void> {
        await this.userPostRaw(requestParameters);
    }

}
