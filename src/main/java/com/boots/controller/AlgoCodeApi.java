/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.boots.controller;

import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;

@Validated
@Api(value = "algoCode", description = "the algoCode API")
public interface AlgoCodeApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /algoCode/{login} : list of files
     *
     * @param login user login (required)
     * @return files found (status code 200)
     *         or user has no code (status code 204)
     *         or user unknown (status code 401)
     *         or access denied (status code 403)
     *         or user not found (status code 404)
     *         or internal server error (status code 500)
     */
    @ApiOperation(value = "list of files", nickname = "algoCodeLoginGet", notes = "", response = String.class, responseContainer = "List", tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "files found", response = String.class, responseContainer = "List"),
        @ApiResponse(code = 204, message = "user has no code"),
        @ApiResponse(code = 401, message = "user unknown"),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "user not found"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/algoCode/{login}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<String>> algoCodeLoginGet(@ApiParam(value = "user login", required = true) @PathVariable("login") String login) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);

    }


    /**
     * POST /algoCode : upload file
     *
     * @param fileName  (optional)
     * @return UUID of uploaded file (status code 200)
     *         or user unknown (status code 401)
     *         or access denied (status code 403)
     *         or internal server error (status code 500)
     */
    @ApiOperation(value = "upload file", nickname = "algoCodePost", notes = "", response = String.class, tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "UUID of uploaded file", response = String.class),
        @ApiResponse(code = 401, message = "user unknown"),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/algoCode",
        produces = { "text/plain" },
        consumes = { "multipart/form-data" },
        method = RequestMethod.POST)
    default ResponseEntity<String> algoCodePost(@ApiParam(value = "") @Valid @RequestPart("fileName") MultipartFile fileName) {
        return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
    }


    /**
     * GET /algoCode/{UUID}/code : returns the code
     *
     * @param UUID UUID of file (required)
     * @return the code (status code 200)
     *         or user unknown (status code 401)
     *         or access denied (status code 403)
     *         or file not found (status code 404)
     *         or internal server error (status code 500)
     */
    @ApiOperation(value = "returns the code", nickname = "algoCodeUUIDCodeGet", notes = "", response = String.class, tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "the code", response = String.class),
        @ApiResponse(code = 401, message = "user unknown"),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "file not found"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/algoCode/{UUID}/code",
        produces = { "text/plain" },
        method = RequestMethod.GET)
    default ResponseEntity<String> algoCodeUUIDCodeGet(@ApiParam(value = "UUID of file", required = true) @PathVariable("UUID") String UUID) {
        return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);

    }


    /**
     * DELETE /algoCode/{UUID} : delete code
     *
     * @param UUID UUID of file (required)
     * @return file deleted (status code 204)
     *         or user unknown (status code 401)
     *         or access denied (status code 403)
     *         or file not found (status code 404)
     *         or internal server error (status code 500)
     */
    @ApiOperation(value = "delete code", nickname = "algoCodeUUIDDelete", notes = "", tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 204, message = "file deleted"),
        @ApiResponse(code = 401, message = "user unknown"),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "file not found"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/algoCode/{UUID}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> algoCodeUUIDDelete(@ApiParam(value = "UUID of file", required = true) @PathVariable("UUID") String UUID) {
        return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);

    }


    /**
     * GET /algoCode/{UUID}/status : code status
     *
     * @param UUID UUID of file (required)
     * @return file status. UPLOADED – to staging, COMPILED – compilation done, TESTED- final status,code finished test run successfully (status code 200)
     *         or user unknown (status code 401)
     *         or access denied (status code 403)
     *         or file not found (status code 404)
     *         or internal server error (status code 500)
     */
    @ApiOperation(value = "code status", nickname = "algoCodeUUIDStatusGet", notes = "", response = String.class, tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "file status. UPLOADED – to staging, COMPILED – compilation done, TESTED- final status,code finished test run successfully", response = String.class),
        @ApiResponse(code = 401, message = "user unknown"),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "file not found"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/algoCode/{UUID}/status",
        produces = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<String> algoCodeUUIDStatusGet(@ApiParam(value = "UUID of file", required = true) @PathVariable("UUID") String UUID) {
        return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);

    }

}
