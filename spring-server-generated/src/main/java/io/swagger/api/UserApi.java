/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.18).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Body2;
import io.swagger.model.Body3;
import io.swagger.model.InlineResponse2001;
import io.swagger.model.InlineResponse2002;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-03-09T23:17:28.193Z[GMT]")
@Api(value = "user", description = "the user API")
public interface UserApi {

    @ApiOperation(value = "list of all user logins", nickname = "userGet", notes = "", response = String.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "users found", response = String.class, responseContainer = "List"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/user",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<String>> userGet();


    @ApiOperation(value = "delete user", nickname = "userLoginDelete", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "user deleted") })
    @RequestMapping(value = "/user/{login}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> userLoginDelete(@ApiParam(value = "user login",required=true) @PathVariable("login") String login
);


    @ApiOperation(value = "user object", nickname = "userLoginGet", notes = "", response = InlineResponse2001.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "json object representing user", response = InlineResponse2001.class) })
    @RequestMapping(value = "/user/{login}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse2001> userLoginGet(@ApiParam(value = "user login",required=true) @PathVariable("login") String login
);


    @ApiOperation(value = "update user", nickname = "userLoginPut", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "update successful"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/user/{login}",
        consumes = { "application/x-www-urlencoded" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> userLoginPut(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Body2 body
,@ApiParam(value = "user login",required=true) @PathVariable("login") String login
);


    @ApiOperation(value = "get user roles", nickname = "userLoginRolesGet", notes = "", response = String.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "users found", response = String.class, responseContainer = "List") })
    @RequestMapping(value = "/user/{login}/roles",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<String>> userLoginRolesGet(@ApiParam(value = "user login",required=true) @PathVariable("login") String login
);


    @ApiOperation(value = "update user roles", nickname = "userLoginRolesPut", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "User role created successfully") })
    @RequestMapping(value = "/user/{login}/roles",
        consumes = { "application/x-www-urlencoded" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> userLoginRolesPut(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Body3 body
,@ApiParam(value = "user login",required=true) @PathVariable("login") String login
);


    @ApiOperation(value = "user status", nickname = "userLoginStatusGet", notes = "", response = InlineResponse2002.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "json object representing user", response = InlineResponse2002.class) })
    @RequestMapping(value = "/user/{login}/status",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse2002> userLoginStatusGet(@ApiParam(value = "user login",required=true) @PathVariable("login") String login
);


    @ApiOperation(value = "create new user", nickname = "userPost", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "User created successfully"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/user",
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<Void> userPost(@ApiParam(value = "", required=true) @RequestParam(value="login", required=true)  String login
,@ApiParam(value = "", required=true) @RequestParam(value="password", required=true)  String password
);

}
