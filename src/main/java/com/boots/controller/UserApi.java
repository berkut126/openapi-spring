/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.boots.controller;

import io.swagger.annotations.*;
import com.boots.entity.InlineObject2;
import com.boots.entity.InlineObject3;
import com.boots.entity.InlineResponse200;
import com.boots.entity.InlineResponse2001;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;

@Validated
@Api(value = "user", description = "the user API")
public interface UserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /user : list of all user logins
     *
     * @return users found (status code 200)
     *         or user unknown (status code 401)
     *         or access denied (status code 403)
     *         or internal server error (status code 500)
     */
    @ApiOperation(value = "list of all user logins", nickname = "userGet", notes = "", response = String.class, responseContainer = "List", tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "users found", response = String.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "user unknown"),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/user",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<String>> userGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /user/{login} : delete user
     *
     * @param login user login (required)
     * @return user deleted (status code 204)
     *         or user unknown (status code 401)
     *         or access denied (status code 403)
     *         or user not found (status code 404)
     *         or internal server error (status code 500)
     */
    @ApiOperation(value = "delete user", nickname = "userLoginDelete", notes = "", tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 204, message = "user deleted"),
        @ApiResponse(code = 401, message = "user unknown"),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "user not found"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/user/{login}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> userLoginDelete(@ApiParam(value = "user login", required = true) @PathVariable("login") String login) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{login} : user object
     *
     * @param login user login (required)
     * @return json object representing user (status code 200)
     *         or user unknown (status code 401)
     *         or access denied (status code 403)
     *         or user not found (status code 404)
     *         or internal server error (status code 500)
     */
    @ApiOperation(value = "user object", nickname = "userLoginGet", notes = "", response = InlineResponse200.class, tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "json object representing user", response = InlineResponse200.class),
        @ApiResponse(code = 401, message = "user unknown"),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "user not found"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/user/{login}",
        produces = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<InlineResponse200> userLoginGet(@ApiParam(value = "user login", required = true) @PathVariable("login") String login) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"blocked\" : true, \"rights\" : \"rights\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /user/{login} : update user
     *
     * @param login user login (required)
     * @param inlineObject2  (required)
     * @return update successful (status code 204)
     *         or user unknown (status code 401)
     *         or access denied (status code 403)
     *         or user not found (status code 404)
     *         or internal server error (status code 500)
     */
    @ApiOperation(value = "update user", nickname = "userLoginPut", notes = "", tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 204, message = "update successful"),
        @ApiResponse(code = 401, message = "user unknown"),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "user not found"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/user/{login}",
        consumes = { "application/x-www-urlencoded" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> userLoginPut(@ApiParam(value = "user login", required = true) @PathVariable("login") String login, @ApiParam(value = "", required = true) @Valid @RequestBody InlineObject2 inlineObject2) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{login}/roles : get user roles
     *
     * @param login user login (required)
     * @return users found (status code 200)
     *         or user unknown (status code 401)
     *         or access denied (status code 403)
     *         or user not found (status code 404)
     *         or internal server error (status code 500)
     */
    @ApiOperation(value = "get user roles", nickname = "userLoginRolesGet", notes = "", response = String.class, responseContainer = "List", tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "users found", response = String.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "user unknown"),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "user not found"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/user/{login}/roles",
        produces = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<List<String>> userLoginRolesGet(@ApiParam(value = "user login", required = true) @PathVariable("login") String login) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /user/{login}/roles : update user roles
     *
     * @param login user login (required)
     * @param inlineObject3  (required)
     * @return User role created successfully (status code 204)
     *         or user unknown (status code 401)
     *         or access denied (status code 403)
     *         or user not found (status code 404)
     *         or internal server error (status code 500)
     */
    @ApiOperation(value = "update user roles", nickname = "userLoginRolesPut", notes = "", tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 204, message = "User role created successfully"),
        @ApiResponse(code = 401, message = "user unknown"),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "user not found"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/user/{login}/roles",
        consumes = { "application/x-www-urlencoded" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> userLoginRolesPut(@ApiParam(value = "user login", required = true) @PathVariable("login") String login, @ApiParam(value = "", required = true) @Valid @RequestBody InlineObject3 inlineObject3) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{login}/status : user status
     *
     * @param login user login (required)
     * @return json object representing user (status code 200)
     *         or user unknown (status code 401)
     *         or access denied (status code 403)
     *         or user not found (status code 404)
     *         or internal server error (status code 500)
     */
    @ApiOperation(value = "user status", nickname = "userLoginStatusGet", notes = "", response = InlineResponse2001.class, tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "json object representing user", response = InlineResponse2001.class),
        @ApiResponse(code = 401, message = "user unknown"),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 404, message = "user not found"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/user/{login}/status",
        produces = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<InlineResponse2001> userLoginStatusGet(@ApiParam(value = "user login", required = true) @PathVariable("login") String login) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"blocked\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /user : create new user
     *
     * @param login  (optional)
     * @param password  (optional)
     * @return User created successfully (status code 204)
     *         or user unknown (status code 401)
     *         or access denied (status code 403)
     *         or internal server error (status code 500)
     */
    @ApiOperation(value = "create new user", nickname = "userPost", notes = "", tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 204, message = "User created successfully"),
        @ApiResponse(code = 401, message = "user unknown"),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/user",
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> userPost(@ApiParam(value = "") @RequestParam(value = "login", required = false) String login, @ApiParam(value = "") @RequestParam(value = "password", required = false) String password) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
