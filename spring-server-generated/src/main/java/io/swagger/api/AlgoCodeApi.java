/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.18).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.InlineResponse200;
import org.springframework.core.io.Resource;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-03-09T23:17:28.193Z[GMT]")
@Api(value = "algoCode", description = "the algoCode API")
public interface AlgoCodeApi {

    @ApiOperation(value = "list of files", nickname = "algoCodeLoginGet", notes = "", response = String.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "files found", response = String.class, responseContainer = "List"),
        @ApiResponse(code = 204, message = "user has no code"),
        @ApiResponse(code = 404, message = "user not found") })
    @RequestMapping(value = "/algoCode/{login}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<String>> algoCodeLoginGet(@ApiParam(value = "user login",required=true) @PathVariable("login") String login
);


    @ApiOperation(value = "upload file", nickname = "algoCodePost", notes = "", response = String.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "UUID of uploaded file", response = String.class) })
    @RequestMapping(value = "/algoCode",
        produces = { "text/plain" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.POST)
    ResponseEntity<String> algoCodePost(@ApiParam(value = "file detail") @Valid @RequestPart("file") MultipartFile fileName
);


    @ApiOperation(value = "returns the code", nickname = "algoCodeUUIDCodeGet", notes = "", response = String.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "the code", response = String.class),
        @ApiResponse(code = 404, message = "file not found"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/algoCode/{UUID}/code",
        produces = { "text/plain" }, 
        method = RequestMethod.GET)
    ResponseEntity<String> algoCodeUUIDCodeGet(@ApiParam(value = "UUID of file",required=true) @PathVariable("UUID") String UUID
);


    @ApiOperation(value = "delete code", nickname = "algoCodeUUIDDelete", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "file deleted"),
        @ApiResponse(code = 404, message = "file not found") })
    @RequestMapping(value = "/algoCode/{UUID}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> algoCodeUUIDDelete(@ApiParam(value = "UUID of file",required=true) @PathVariable("UUID") String UUID
);


    @ApiOperation(value = "code status", nickname = "algoCodeUUIDStatusGet", notes = "", response = InlineResponse200.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "file status. UPLOADED – to staging, COMPILED – compilation done, TESTED- final status,code finished test run successfully", response = InlineResponse200.class) })
    @RequestMapping(value = "/algoCode/{UUID}/status",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse200> algoCodeUUIDStatusGet(@ApiParam(value = "UUID of file",required=true) @PathVariable("UUID") String UUID
);

}
